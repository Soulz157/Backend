
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Info
 * 
 */
export type Info = $Result.DefaultSelection<Prisma.$InfoPayload>
/**
 * Model Inter
 * 
 */
export type Inter = $Result.DefaultSelection<Prisma.$InterPayload>
/**
 * Model Simpson
 * 
 */
export type Simpson = $Result.DefaultSelection<Prisma.$SimpsonPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Problem: {
  Root: 'Root',
  Linear: 'Linear',
  Interpolation: 'Interpolation',
  Exterpolation: 'Exterpolation',
  Integration: 'Integration',
  Differentiation: 'Differentiation'
};

export type Problem = (typeof Problem)[keyof typeof Problem]

}

export type Problem = $Enums.Problem

export const Problem: typeof $Enums.Problem

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Infos
 * const infos = await prisma.info.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Infos
   * const infos = await prisma.info.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.info`: Exposes CRUD operations for the **Info** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Infos
    * const infos = await prisma.info.findMany()
    * ```
    */
  get info(): Prisma.InfoDelegate<ExtArgs>;

  /**
   * `prisma.inter`: Exposes CRUD operations for the **Inter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inters
    * const inters = await prisma.inter.findMany()
    * ```
    */
  get inter(): Prisma.InterDelegate<ExtArgs>;

  /**
   * `prisma.simpson`: Exposes CRUD operations for the **Simpson** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Simpsons
    * const simpsons = await prisma.simpson.findMany()
    * ```
    */
  get simpson(): Prisma.SimpsonDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Info: 'Info',
    Inter: 'Inter',
    Simpson: 'Simpson'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "info" | "inter" | "simpson"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Info: {
        payload: Prisma.$InfoPayload<ExtArgs>
        fields: Prisma.InfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload>
          }
          findFirst: {
            args: Prisma.InfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload>
          }
          findMany: {
            args: Prisma.InfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload>[]
          }
          create: {
            args: Prisma.InfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload>
          }
          createMany: {
            args: Prisma.InfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload>[]
          }
          delete: {
            args: Prisma.InfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload>
          }
          update: {
            args: Prisma.InfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload>
          }
          deleteMany: {
            args: Prisma.InfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InfoPayload>
          }
          aggregate: {
            args: Prisma.InfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInfo>
          }
          groupBy: {
            args: Prisma.InfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<InfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.InfoCountArgs<ExtArgs>
            result: $Utils.Optional<InfoCountAggregateOutputType> | number
          }
        }
      }
      Inter: {
        payload: Prisma.$InterPayload<ExtArgs>
        fields: Prisma.InterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterPayload>
          }
          findFirst: {
            args: Prisma.InterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterPayload>
          }
          findMany: {
            args: Prisma.InterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterPayload>[]
          }
          create: {
            args: Prisma.InterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterPayload>
          }
          createMany: {
            args: Prisma.InterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterPayload>[]
          }
          delete: {
            args: Prisma.InterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterPayload>
          }
          update: {
            args: Prisma.InterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterPayload>
          }
          deleteMany: {
            args: Prisma.InterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterPayload>
          }
          aggregate: {
            args: Prisma.InterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInter>
          }
          groupBy: {
            args: Prisma.InterGroupByArgs<ExtArgs>
            result: $Utils.Optional<InterGroupByOutputType>[]
          }
          count: {
            args: Prisma.InterCountArgs<ExtArgs>
            result: $Utils.Optional<InterCountAggregateOutputType> | number
          }
        }
      }
      Simpson: {
        payload: Prisma.$SimpsonPayload<ExtArgs>
        fields: Prisma.SimpsonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SimpsonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimpsonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SimpsonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimpsonPayload>
          }
          findFirst: {
            args: Prisma.SimpsonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimpsonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SimpsonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimpsonPayload>
          }
          findMany: {
            args: Prisma.SimpsonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimpsonPayload>[]
          }
          create: {
            args: Prisma.SimpsonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimpsonPayload>
          }
          createMany: {
            args: Prisma.SimpsonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SimpsonCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimpsonPayload>[]
          }
          delete: {
            args: Prisma.SimpsonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimpsonPayload>
          }
          update: {
            args: Prisma.SimpsonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimpsonPayload>
          }
          deleteMany: {
            args: Prisma.SimpsonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SimpsonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SimpsonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SimpsonPayload>
          }
          aggregate: {
            args: Prisma.SimpsonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSimpson>
          }
          groupBy: {
            args: Prisma.SimpsonGroupByArgs<ExtArgs>
            result: $Utils.Optional<SimpsonGroupByOutputType>[]
          }
          count: {
            args: Prisma.SimpsonCountArgs<ExtArgs>
            result: $Utils.Optional<SimpsonCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Info
   */

  export type AggregateInfo = {
    _count: InfoCountAggregateOutputType | null
    _avg: InfoAvgAggregateOutputType | null
    _sum: InfoSumAggregateOutputType | null
    _min: InfoMinAggregateOutputType | null
    _max: InfoMaxAggregateOutputType | null
  }

  export type InfoAvgAggregateOutputType = {
    xl: number | null
    xr: number | null
    size: number | null
  }

  export type InfoSumAggregateOutputType = {
    xl: number | null
    xr: number | null
    size: number | null
  }

  export type InfoMinAggregateOutputType = {
    id: string | null
    Problem: $Enums.Problem | null
    solution: string | null
    xl: number | null
    xr: number | null
    size: number | null
  }

  export type InfoMaxAggregateOutputType = {
    id: string | null
    Problem: $Enums.Problem | null
    solution: string | null
    xl: number | null
    xr: number | null
    size: number | null
  }

  export type InfoCountAggregateOutputType = {
    id: number
    Problem: number
    solution: number
    xl: number
    xr: number
    size: number
    _all: number
  }


  export type InfoAvgAggregateInputType = {
    xl?: true
    xr?: true
    size?: true
  }

  export type InfoSumAggregateInputType = {
    xl?: true
    xr?: true
    size?: true
  }

  export type InfoMinAggregateInputType = {
    id?: true
    Problem?: true
    solution?: true
    xl?: true
    xr?: true
    size?: true
  }

  export type InfoMaxAggregateInputType = {
    id?: true
    Problem?: true
    solution?: true
    xl?: true
    xr?: true
    size?: true
  }

  export type InfoCountAggregateInputType = {
    id?: true
    Problem?: true
    solution?: true
    xl?: true
    xr?: true
    size?: true
    _all?: true
  }

  export type InfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Info to aggregate.
     */
    where?: InfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Infos to fetch.
     */
    orderBy?: InfoOrderByWithRelationInput | InfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Infos
    **/
    _count?: true | InfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InfoMaxAggregateInputType
  }

  export type GetInfoAggregateType<T extends InfoAggregateArgs> = {
        [P in keyof T & keyof AggregateInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInfo[P]>
      : GetScalarType<T[P], AggregateInfo[P]>
  }




  export type InfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InfoWhereInput
    orderBy?: InfoOrderByWithAggregationInput | InfoOrderByWithAggregationInput[]
    by: InfoScalarFieldEnum[] | InfoScalarFieldEnum
    having?: InfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InfoCountAggregateInputType | true
    _avg?: InfoAvgAggregateInputType
    _sum?: InfoSumAggregateInputType
    _min?: InfoMinAggregateInputType
    _max?: InfoMaxAggregateInputType
  }

  export type InfoGroupByOutputType = {
    id: string
    Problem: $Enums.Problem
    solution: string
    xl: number
    xr: number
    size: number
    _count: InfoCountAggregateOutputType | null
    _avg: InfoAvgAggregateOutputType | null
    _sum: InfoSumAggregateOutputType | null
    _min: InfoMinAggregateOutputType | null
    _max: InfoMaxAggregateOutputType | null
  }

  type GetInfoGroupByPayload<T extends InfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InfoGroupByOutputType[P]>
            : GetScalarType<T[P], InfoGroupByOutputType[P]>
        }
      >
    >


  export type InfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Problem?: boolean
    solution?: boolean
    xl?: boolean
    xr?: boolean
    size?: boolean
  }, ExtArgs["result"]["info"]>

  export type InfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Problem?: boolean
    solution?: boolean
    xl?: boolean
    xr?: boolean
    size?: boolean
  }, ExtArgs["result"]["info"]>

  export type InfoSelectScalar = {
    id?: boolean
    Problem?: boolean
    solution?: boolean
    xl?: boolean
    xr?: boolean
    size?: boolean
  }


  export type $InfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Info"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Problem: $Enums.Problem
      solution: string
      xl: number
      xr: number
      size: number
    }, ExtArgs["result"]["info"]>
    composites: {}
  }

  type InfoGetPayload<S extends boolean | null | undefined | InfoDefaultArgs> = $Result.GetResult<Prisma.$InfoPayload, S>

  type InfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InfoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InfoCountAggregateInputType | true
    }

  export interface InfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Info'], meta: { name: 'Info' } }
    /**
     * Find zero or one Info that matches the filter.
     * @param {InfoFindUniqueArgs} args - Arguments to find a Info
     * @example
     * // Get one Info
     * const info = await prisma.info.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InfoFindUniqueArgs>(args: SelectSubset<T, InfoFindUniqueArgs<ExtArgs>>): Prisma__InfoClient<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Info that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InfoFindUniqueOrThrowArgs} args - Arguments to find a Info
     * @example
     * // Get one Info
     * const info = await prisma.info.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InfoFindUniqueOrThrowArgs>(args: SelectSubset<T, InfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InfoClient<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Info that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfoFindFirstArgs} args - Arguments to find a Info
     * @example
     * // Get one Info
     * const info = await prisma.info.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InfoFindFirstArgs>(args?: SelectSubset<T, InfoFindFirstArgs<ExtArgs>>): Prisma__InfoClient<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Info that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfoFindFirstOrThrowArgs} args - Arguments to find a Info
     * @example
     * // Get one Info
     * const info = await prisma.info.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InfoFindFirstOrThrowArgs>(args?: SelectSubset<T, InfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__InfoClient<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Infos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Infos
     * const infos = await prisma.info.findMany()
     * 
     * // Get first 10 Infos
     * const infos = await prisma.info.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const infoWithIdOnly = await prisma.info.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InfoFindManyArgs>(args?: SelectSubset<T, InfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Info.
     * @param {InfoCreateArgs} args - Arguments to create a Info.
     * @example
     * // Create one Info
     * const Info = await prisma.info.create({
     *   data: {
     *     // ... data to create a Info
     *   }
     * })
     * 
     */
    create<T extends InfoCreateArgs>(args: SelectSubset<T, InfoCreateArgs<ExtArgs>>): Prisma__InfoClient<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Infos.
     * @param {InfoCreateManyArgs} args - Arguments to create many Infos.
     * @example
     * // Create many Infos
     * const info = await prisma.info.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InfoCreateManyArgs>(args?: SelectSubset<T, InfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Infos and returns the data saved in the database.
     * @param {InfoCreateManyAndReturnArgs} args - Arguments to create many Infos.
     * @example
     * // Create many Infos
     * const info = await prisma.info.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Infos and only return the `id`
     * const infoWithIdOnly = await prisma.info.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InfoCreateManyAndReturnArgs>(args?: SelectSubset<T, InfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Info.
     * @param {InfoDeleteArgs} args - Arguments to delete one Info.
     * @example
     * // Delete one Info
     * const Info = await prisma.info.delete({
     *   where: {
     *     // ... filter to delete one Info
     *   }
     * })
     * 
     */
    delete<T extends InfoDeleteArgs>(args: SelectSubset<T, InfoDeleteArgs<ExtArgs>>): Prisma__InfoClient<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Info.
     * @param {InfoUpdateArgs} args - Arguments to update one Info.
     * @example
     * // Update one Info
     * const info = await prisma.info.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InfoUpdateArgs>(args: SelectSubset<T, InfoUpdateArgs<ExtArgs>>): Prisma__InfoClient<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Infos.
     * @param {InfoDeleteManyArgs} args - Arguments to filter Infos to delete.
     * @example
     * // Delete a few Infos
     * const { count } = await prisma.info.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InfoDeleteManyArgs>(args?: SelectSubset<T, InfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Infos
     * const info = await prisma.info.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InfoUpdateManyArgs>(args: SelectSubset<T, InfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Info.
     * @param {InfoUpsertArgs} args - Arguments to update or create a Info.
     * @example
     * // Update or create a Info
     * const info = await prisma.info.upsert({
     *   create: {
     *     // ... data to create a Info
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Info we want to update
     *   }
     * })
     */
    upsert<T extends InfoUpsertArgs>(args: SelectSubset<T, InfoUpsertArgs<ExtArgs>>): Prisma__InfoClient<$Result.GetResult<Prisma.$InfoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Infos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfoCountArgs} args - Arguments to filter Infos to count.
     * @example
     * // Count the number of Infos
     * const count = await prisma.info.count({
     *   where: {
     *     // ... the filter for the Infos we want to count
     *   }
     * })
    **/
    count<T extends InfoCountArgs>(
      args?: Subset<T, InfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InfoAggregateArgs>(args: Subset<T, InfoAggregateArgs>): Prisma.PrismaPromise<GetInfoAggregateType<T>>

    /**
     * Group by Info.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InfoGroupByArgs['orderBy'] }
        : { orderBy?: InfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Info model
   */
  readonly fields: InfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Info.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Info model
   */ 
  interface InfoFieldRefs {
    readonly id: FieldRef<"Info", 'String'>
    readonly Problem: FieldRef<"Info", 'Problem'>
    readonly solution: FieldRef<"Info", 'String'>
    readonly xl: FieldRef<"Info", 'Float'>
    readonly xr: FieldRef<"Info", 'Float'>
    readonly size: FieldRef<"Info", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Info findUnique
   */
  export type InfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * Filter, which Info to fetch.
     */
    where: InfoWhereUniqueInput
  }

  /**
   * Info findUniqueOrThrow
   */
  export type InfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * Filter, which Info to fetch.
     */
    where: InfoWhereUniqueInput
  }

  /**
   * Info findFirst
   */
  export type InfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * Filter, which Info to fetch.
     */
    where?: InfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Infos to fetch.
     */
    orderBy?: InfoOrderByWithRelationInput | InfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Infos.
     */
    cursor?: InfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Infos.
     */
    distinct?: InfoScalarFieldEnum | InfoScalarFieldEnum[]
  }

  /**
   * Info findFirstOrThrow
   */
  export type InfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * Filter, which Info to fetch.
     */
    where?: InfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Infos to fetch.
     */
    orderBy?: InfoOrderByWithRelationInput | InfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Infos.
     */
    cursor?: InfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Infos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Infos.
     */
    distinct?: InfoScalarFieldEnum | InfoScalarFieldEnum[]
  }

  /**
   * Info findMany
   */
  export type InfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * Filter, which Infos to fetch.
     */
    where?: InfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Infos to fetch.
     */
    orderBy?: InfoOrderByWithRelationInput | InfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Infos.
     */
    cursor?: InfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Infos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Infos.
     */
    skip?: number
    distinct?: InfoScalarFieldEnum | InfoScalarFieldEnum[]
  }

  /**
   * Info create
   */
  export type InfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * The data needed to create a Info.
     */
    data: XOR<InfoCreateInput, InfoUncheckedCreateInput>
  }

  /**
   * Info createMany
   */
  export type InfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Infos.
     */
    data: InfoCreateManyInput | InfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Info createManyAndReturn
   */
  export type InfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Infos.
     */
    data: InfoCreateManyInput | InfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Info update
   */
  export type InfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * The data needed to update a Info.
     */
    data: XOR<InfoUpdateInput, InfoUncheckedUpdateInput>
    /**
     * Choose, which Info to update.
     */
    where: InfoWhereUniqueInput
  }

  /**
   * Info updateMany
   */
  export type InfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Infos.
     */
    data: XOR<InfoUpdateManyMutationInput, InfoUncheckedUpdateManyInput>
    /**
     * Filter which Infos to update
     */
    where?: InfoWhereInput
  }

  /**
   * Info upsert
   */
  export type InfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * The filter to search for the Info to update in case it exists.
     */
    where: InfoWhereUniqueInput
    /**
     * In case the Info found by the `where` argument doesn't exist, create a new Info with this data.
     */
    create: XOR<InfoCreateInput, InfoUncheckedCreateInput>
    /**
     * In case the Info was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InfoUpdateInput, InfoUncheckedUpdateInput>
  }

  /**
   * Info delete
   */
  export type InfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
    /**
     * Filter which Info to delete.
     */
    where: InfoWhereUniqueInput
  }

  /**
   * Info deleteMany
   */
  export type InfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Infos to delete
     */
    where?: InfoWhereInput
  }

  /**
   * Info without action
   */
  export type InfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Info
     */
    select?: InfoSelect<ExtArgs> | null
  }


  /**
   * Model Inter
   */

  export type AggregateInter = {
    _count: InterCountAggregateOutputType | null
    _avg: InterAvgAggregateOutputType | null
    _sum: InterSumAggregateOutputType | null
    _min: InterMinAggregateOutputType | null
    _max: InterMaxAggregateOutputType | null
  }

  export type InterAvgAggregateOutputType = {
    x: number | null
    Fx: number | null
    xvalue: number | null
    size: number | null
  }

  export type InterSumAggregateOutputType = {
    x: number[]
    Fx: number[]
    xvalue: number | null
    size: number | null
  }

  export type InterMinAggregateOutputType = {
    id: string | null
    Problem: $Enums.Problem | null
    xvalue: number | null
    size: number | null
  }

  export type InterMaxAggregateOutputType = {
    id: string | null
    Problem: $Enums.Problem | null
    xvalue: number | null
    size: number | null
  }

  export type InterCountAggregateOutputType = {
    id: number
    Problem: number
    x: number
    Fx: number
    xvalue: number
    size: number
    _all: number
  }


  export type InterAvgAggregateInputType = {
    x?: true
    Fx?: true
    xvalue?: true
    size?: true
  }

  export type InterSumAggregateInputType = {
    x?: true
    Fx?: true
    xvalue?: true
    size?: true
  }

  export type InterMinAggregateInputType = {
    id?: true
    Problem?: true
    xvalue?: true
    size?: true
  }

  export type InterMaxAggregateInputType = {
    id?: true
    Problem?: true
    xvalue?: true
    size?: true
  }

  export type InterCountAggregateInputType = {
    id?: true
    Problem?: true
    x?: true
    Fx?: true
    xvalue?: true
    size?: true
    _all?: true
  }

  export type InterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inter to aggregate.
     */
    where?: InterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inters to fetch.
     */
    orderBy?: InterOrderByWithRelationInput | InterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Inters
    **/
    _count?: true | InterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InterMaxAggregateInputType
  }

  export type GetInterAggregateType<T extends InterAggregateArgs> = {
        [P in keyof T & keyof AggregateInter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInter[P]>
      : GetScalarType<T[P], AggregateInter[P]>
  }




  export type InterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterWhereInput
    orderBy?: InterOrderByWithAggregationInput | InterOrderByWithAggregationInput[]
    by: InterScalarFieldEnum[] | InterScalarFieldEnum
    having?: InterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InterCountAggregateInputType | true
    _avg?: InterAvgAggregateInputType
    _sum?: InterSumAggregateInputType
    _min?: InterMinAggregateInputType
    _max?: InterMaxAggregateInputType
  }

  export type InterGroupByOutputType = {
    id: string
    Problem: $Enums.Problem
    x: number[]
    Fx: number[]
    xvalue: number
    size: number
    _count: InterCountAggregateOutputType | null
    _avg: InterAvgAggregateOutputType | null
    _sum: InterSumAggregateOutputType | null
    _min: InterMinAggregateOutputType | null
    _max: InterMaxAggregateOutputType | null
  }

  type GetInterGroupByPayload<T extends InterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InterGroupByOutputType[P]>
            : GetScalarType<T[P], InterGroupByOutputType[P]>
        }
      >
    >


  export type InterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Problem?: boolean
    x?: boolean
    Fx?: boolean
    xvalue?: boolean
    size?: boolean
  }, ExtArgs["result"]["inter"]>

  export type InterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Problem?: boolean
    x?: boolean
    Fx?: boolean
    xvalue?: boolean
    size?: boolean
  }, ExtArgs["result"]["inter"]>

  export type InterSelectScalar = {
    id?: boolean
    Problem?: boolean
    x?: boolean
    Fx?: boolean
    xvalue?: boolean
    size?: boolean
  }


  export type $InterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Inter"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Problem: $Enums.Problem
      x: number[]
      Fx: number[]
      xvalue: number
      size: number
    }, ExtArgs["result"]["inter"]>
    composites: {}
  }

  type InterGetPayload<S extends boolean | null | undefined | InterDefaultArgs> = $Result.GetResult<Prisma.$InterPayload, S>

  type InterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InterCountAggregateInputType | true
    }

  export interface InterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Inter'], meta: { name: 'Inter' } }
    /**
     * Find zero or one Inter that matches the filter.
     * @param {InterFindUniqueArgs} args - Arguments to find a Inter
     * @example
     * // Get one Inter
     * const inter = await prisma.inter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InterFindUniqueArgs>(args: SelectSubset<T, InterFindUniqueArgs<ExtArgs>>): Prisma__InterClient<$Result.GetResult<Prisma.$InterPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Inter that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InterFindUniqueOrThrowArgs} args - Arguments to find a Inter
     * @example
     * // Get one Inter
     * const inter = await prisma.inter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InterFindUniqueOrThrowArgs>(args: SelectSubset<T, InterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InterClient<$Result.GetResult<Prisma.$InterPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Inter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterFindFirstArgs} args - Arguments to find a Inter
     * @example
     * // Get one Inter
     * const inter = await prisma.inter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InterFindFirstArgs>(args?: SelectSubset<T, InterFindFirstArgs<ExtArgs>>): Prisma__InterClient<$Result.GetResult<Prisma.$InterPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Inter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterFindFirstOrThrowArgs} args - Arguments to find a Inter
     * @example
     * // Get one Inter
     * const inter = await prisma.inter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InterFindFirstOrThrowArgs>(args?: SelectSubset<T, InterFindFirstOrThrowArgs<ExtArgs>>): Prisma__InterClient<$Result.GetResult<Prisma.$InterPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Inters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inters
     * const inters = await prisma.inter.findMany()
     * 
     * // Get first 10 Inters
     * const inters = await prisma.inter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const interWithIdOnly = await prisma.inter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InterFindManyArgs>(args?: SelectSubset<T, InterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Inter.
     * @param {InterCreateArgs} args - Arguments to create a Inter.
     * @example
     * // Create one Inter
     * const Inter = await prisma.inter.create({
     *   data: {
     *     // ... data to create a Inter
     *   }
     * })
     * 
     */
    create<T extends InterCreateArgs>(args: SelectSubset<T, InterCreateArgs<ExtArgs>>): Prisma__InterClient<$Result.GetResult<Prisma.$InterPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Inters.
     * @param {InterCreateManyArgs} args - Arguments to create many Inters.
     * @example
     * // Create many Inters
     * const inter = await prisma.inter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InterCreateManyArgs>(args?: SelectSubset<T, InterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Inters and returns the data saved in the database.
     * @param {InterCreateManyAndReturnArgs} args - Arguments to create many Inters.
     * @example
     * // Create many Inters
     * const inter = await prisma.inter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Inters and only return the `id`
     * const interWithIdOnly = await prisma.inter.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InterCreateManyAndReturnArgs>(args?: SelectSubset<T, InterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Inter.
     * @param {InterDeleteArgs} args - Arguments to delete one Inter.
     * @example
     * // Delete one Inter
     * const Inter = await prisma.inter.delete({
     *   where: {
     *     // ... filter to delete one Inter
     *   }
     * })
     * 
     */
    delete<T extends InterDeleteArgs>(args: SelectSubset<T, InterDeleteArgs<ExtArgs>>): Prisma__InterClient<$Result.GetResult<Prisma.$InterPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Inter.
     * @param {InterUpdateArgs} args - Arguments to update one Inter.
     * @example
     * // Update one Inter
     * const inter = await prisma.inter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InterUpdateArgs>(args: SelectSubset<T, InterUpdateArgs<ExtArgs>>): Prisma__InterClient<$Result.GetResult<Prisma.$InterPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Inters.
     * @param {InterDeleteManyArgs} args - Arguments to filter Inters to delete.
     * @example
     * // Delete a few Inters
     * const { count } = await prisma.inter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InterDeleteManyArgs>(args?: SelectSubset<T, InterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inters
     * const inter = await prisma.inter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InterUpdateManyArgs>(args: SelectSubset<T, InterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Inter.
     * @param {InterUpsertArgs} args - Arguments to update or create a Inter.
     * @example
     * // Update or create a Inter
     * const inter = await prisma.inter.upsert({
     *   create: {
     *     // ... data to create a Inter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inter we want to update
     *   }
     * })
     */
    upsert<T extends InterUpsertArgs>(args: SelectSubset<T, InterUpsertArgs<ExtArgs>>): Prisma__InterClient<$Result.GetResult<Prisma.$InterPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Inters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterCountArgs} args - Arguments to filter Inters to count.
     * @example
     * // Count the number of Inters
     * const count = await prisma.inter.count({
     *   where: {
     *     // ... the filter for the Inters we want to count
     *   }
     * })
    **/
    count<T extends InterCountArgs>(
      args?: Subset<T, InterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InterAggregateArgs>(args: Subset<T, InterAggregateArgs>): Prisma.PrismaPromise<GetInterAggregateType<T>>

    /**
     * Group by Inter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InterGroupByArgs['orderBy'] }
        : { orderBy?: InterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Inter model
   */
  readonly fields: InterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Inter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Inter model
   */ 
  interface InterFieldRefs {
    readonly id: FieldRef<"Inter", 'String'>
    readonly Problem: FieldRef<"Inter", 'Problem'>
    readonly x: FieldRef<"Inter", 'Float[]'>
    readonly Fx: FieldRef<"Inter", 'Float[]'>
    readonly xvalue: FieldRef<"Inter", 'Float'>
    readonly size: FieldRef<"Inter", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Inter findUnique
   */
  export type InterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inter
     */
    select?: InterSelect<ExtArgs> | null
    /**
     * Filter, which Inter to fetch.
     */
    where: InterWhereUniqueInput
  }

  /**
   * Inter findUniqueOrThrow
   */
  export type InterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inter
     */
    select?: InterSelect<ExtArgs> | null
    /**
     * Filter, which Inter to fetch.
     */
    where: InterWhereUniqueInput
  }

  /**
   * Inter findFirst
   */
  export type InterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inter
     */
    select?: InterSelect<ExtArgs> | null
    /**
     * Filter, which Inter to fetch.
     */
    where?: InterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inters to fetch.
     */
    orderBy?: InterOrderByWithRelationInput | InterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inters.
     */
    cursor?: InterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inters.
     */
    distinct?: InterScalarFieldEnum | InterScalarFieldEnum[]
  }

  /**
   * Inter findFirstOrThrow
   */
  export type InterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inter
     */
    select?: InterSelect<ExtArgs> | null
    /**
     * Filter, which Inter to fetch.
     */
    where?: InterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inters to fetch.
     */
    orderBy?: InterOrderByWithRelationInput | InterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inters.
     */
    cursor?: InterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inters.
     */
    distinct?: InterScalarFieldEnum | InterScalarFieldEnum[]
  }

  /**
   * Inter findMany
   */
  export type InterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inter
     */
    select?: InterSelect<ExtArgs> | null
    /**
     * Filter, which Inters to fetch.
     */
    where?: InterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inters to fetch.
     */
    orderBy?: InterOrderByWithRelationInput | InterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Inters.
     */
    cursor?: InterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inters.
     */
    skip?: number
    distinct?: InterScalarFieldEnum | InterScalarFieldEnum[]
  }

  /**
   * Inter create
   */
  export type InterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inter
     */
    select?: InterSelect<ExtArgs> | null
    /**
     * The data needed to create a Inter.
     */
    data: XOR<InterCreateInput, InterUncheckedCreateInput>
  }

  /**
   * Inter createMany
   */
  export type InterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Inters.
     */
    data: InterCreateManyInput | InterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Inter createManyAndReturn
   */
  export type InterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inter
     */
    select?: InterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Inters.
     */
    data: InterCreateManyInput | InterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Inter update
   */
  export type InterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inter
     */
    select?: InterSelect<ExtArgs> | null
    /**
     * The data needed to update a Inter.
     */
    data: XOR<InterUpdateInput, InterUncheckedUpdateInput>
    /**
     * Choose, which Inter to update.
     */
    where: InterWhereUniqueInput
  }

  /**
   * Inter updateMany
   */
  export type InterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Inters.
     */
    data: XOR<InterUpdateManyMutationInput, InterUncheckedUpdateManyInput>
    /**
     * Filter which Inters to update
     */
    where?: InterWhereInput
  }

  /**
   * Inter upsert
   */
  export type InterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inter
     */
    select?: InterSelect<ExtArgs> | null
    /**
     * The filter to search for the Inter to update in case it exists.
     */
    where: InterWhereUniqueInput
    /**
     * In case the Inter found by the `where` argument doesn't exist, create a new Inter with this data.
     */
    create: XOR<InterCreateInput, InterUncheckedCreateInput>
    /**
     * In case the Inter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InterUpdateInput, InterUncheckedUpdateInput>
  }

  /**
   * Inter delete
   */
  export type InterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inter
     */
    select?: InterSelect<ExtArgs> | null
    /**
     * Filter which Inter to delete.
     */
    where: InterWhereUniqueInput
  }

  /**
   * Inter deleteMany
   */
  export type InterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inters to delete
     */
    where?: InterWhereInput
  }

  /**
   * Inter without action
   */
  export type InterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inter
     */
    select?: InterSelect<ExtArgs> | null
  }


  /**
   * Model Simpson
   */

  export type AggregateSimpson = {
    _count: SimpsonCountAggregateOutputType | null
    _avg: SimpsonAvgAggregateOutputType | null
    _sum: SimpsonSumAggregateOutputType | null
    _min: SimpsonMinAggregateOutputType | null
    _max: SimpsonMaxAggregateOutputType | null
  }

  export type SimpsonAvgAggregateOutputType = {
    xstart: number | null
    xend: number | null
    n: number | null
  }

  export type SimpsonSumAggregateOutputType = {
    xstart: number | null
    xend: number | null
    n: number | null
  }

  export type SimpsonMinAggregateOutputType = {
    id: string | null
    Problem: $Enums.Problem | null
    solution: string | null
    xstart: number | null
    xend: number | null
    n: number | null
  }

  export type SimpsonMaxAggregateOutputType = {
    id: string | null
    Problem: $Enums.Problem | null
    solution: string | null
    xstart: number | null
    xend: number | null
    n: number | null
  }

  export type SimpsonCountAggregateOutputType = {
    id: number
    Problem: number
    solution: number
    xstart: number
    xend: number
    n: number
    _all: number
  }


  export type SimpsonAvgAggregateInputType = {
    xstart?: true
    xend?: true
    n?: true
  }

  export type SimpsonSumAggregateInputType = {
    xstart?: true
    xend?: true
    n?: true
  }

  export type SimpsonMinAggregateInputType = {
    id?: true
    Problem?: true
    solution?: true
    xstart?: true
    xend?: true
    n?: true
  }

  export type SimpsonMaxAggregateInputType = {
    id?: true
    Problem?: true
    solution?: true
    xstart?: true
    xend?: true
    n?: true
  }

  export type SimpsonCountAggregateInputType = {
    id?: true
    Problem?: true
    solution?: true
    xstart?: true
    xend?: true
    n?: true
    _all?: true
  }

  export type SimpsonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Simpson to aggregate.
     */
    where?: SimpsonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Simpsons to fetch.
     */
    orderBy?: SimpsonOrderByWithRelationInput | SimpsonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SimpsonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Simpsons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Simpsons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Simpsons
    **/
    _count?: true | SimpsonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SimpsonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SimpsonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SimpsonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SimpsonMaxAggregateInputType
  }

  export type GetSimpsonAggregateType<T extends SimpsonAggregateArgs> = {
        [P in keyof T & keyof AggregateSimpson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSimpson[P]>
      : GetScalarType<T[P], AggregateSimpson[P]>
  }




  export type SimpsonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SimpsonWhereInput
    orderBy?: SimpsonOrderByWithAggregationInput | SimpsonOrderByWithAggregationInput[]
    by: SimpsonScalarFieldEnum[] | SimpsonScalarFieldEnum
    having?: SimpsonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SimpsonCountAggregateInputType | true
    _avg?: SimpsonAvgAggregateInputType
    _sum?: SimpsonSumAggregateInputType
    _min?: SimpsonMinAggregateInputType
    _max?: SimpsonMaxAggregateInputType
  }

  export type SimpsonGroupByOutputType = {
    id: string
    Problem: $Enums.Problem
    solution: string
    xstart: number
    xend: number
    n: number
    _count: SimpsonCountAggregateOutputType | null
    _avg: SimpsonAvgAggregateOutputType | null
    _sum: SimpsonSumAggregateOutputType | null
    _min: SimpsonMinAggregateOutputType | null
    _max: SimpsonMaxAggregateOutputType | null
  }

  type GetSimpsonGroupByPayload<T extends SimpsonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SimpsonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SimpsonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SimpsonGroupByOutputType[P]>
            : GetScalarType<T[P], SimpsonGroupByOutputType[P]>
        }
      >
    >


  export type SimpsonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Problem?: boolean
    solution?: boolean
    xstart?: boolean
    xend?: boolean
    n?: boolean
  }, ExtArgs["result"]["simpson"]>

  export type SimpsonSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Problem?: boolean
    solution?: boolean
    xstart?: boolean
    xend?: boolean
    n?: boolean
  }, ExtArgs["result"]["simpson"]>

  export type SimpsonSelectScalar = {
    id?: boolean
    Problem?: boolean
    solution?: boolean
    xstart?: boolean
    xend?: boolean
    n?: boolean
  }


  export type $SimpsonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Simpson"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Problem: $Enums.Problem
      solution: string
      xstart: number
      xend: number
      n: number
    }, ExtArgs["result"]["simpson"]>
    composites: {}
  }

  type SimpsonGetPayload<S extends boolean | null | undefined | SimpsonDefaultArgs> = $Result.GetResult<Prisma.$SimpsonPayload, S>

  type SimpsonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SimpsonFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SimpsonCountAggregateInputType | true
    }

  export interface SimpsonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Simpson'], meta: { name: 'Simpson' } }
    /**
     * Find zero or one Simpson that matches the filter.
     * @param {SimpsonFindUniqueArgs} args - Arguments to find a Simpson
     * @example
     * // Get one Simpson
     * const simpson = await prisma.simpson.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SimpsonFindUniqueArgs>(args: SelectSubset<T, SimpsonFindUniqueArgs<ExtArgs>>): Prisma__SimpsonClient<$Result.GetResult<Prisma.$SimpsonPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Simpson that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SimpsonFindUniqueOrThrowArgs} args - Arguments to find a Simpson
     * @example
     * // Get one Simpson
     * const simpson = await prisma.simpson.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SimpsonFindUniqueOrThrowArgs>(args: SelectSubset<T, SimpsonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SimpsonClient<$Result.GetResult<Prisma.$SimpsonPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Simpson that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimpsonFindFirstArgs} args - Arguments to find a Simpson
     * @example
     * // Get one Simpson
     * const simpson = await prisma.simpson.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SimpsonFindFirstArgs>(args?: SelectSubset<T, SimpsonFindFirstArgs<ExtArgs>>): Prisma__SimpsonClient<$Result.GetResult<Prisma.$SimpsonPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Simpson that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimpsonFindFirstOrThrowArgs} args - Arguments to find a Simpson
     * @example
     * // Get one Simpson
     * const simpson = await prisma.simpson.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SimpsonFindFirstOrThrowArgs>(args?: SelectSubset<T, SimpsonFindFirstOrThrowArgs<ExtArgs>>): Prisma__SimpsonClient<$Result.GetResult<Prisma.$SimpsonPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Simpsons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimpsonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Simpsons
     * const simpsons = await prisma.simpson.findMany()
     * 
     * // Get first 10 Simpsons
     * const simpsons = await prisma.simpson.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const simpsonWithIdOnly = await prisma.simpson.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SimpsonFindManyArgs>(args?: SelectSubset<T, SimpsonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimpsonPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Simpson.
     * @param {SimpsonCreateArgs} args - Arguments to create a Simpson.
     * @example
     * // Create one Simpson
     * const Simpson = await prisma.simpson.create({
     *   data: {
     *     // ... data to create a Simpson
     *   }
     * })
     * 
     */
    create<T extends SimpsonCreateArgs>(args: SelectSubset<T, SimpsonCreateArgs<ExtArgs>>): Prisma__SimpsonClient<$Result.GetResult<Prisma.$SimpsonPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Simpsons.
     * @param {SimpsonCreateManyArgs} args - Arguments to create many Simpsons.
     * @example
     * // Create many Simpsons
     * const simpson = await prisma.simpson.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SimpsonCreateManyArgs>(args?: SelectSubset<T, SimpsonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Simpsons and returns the data saved in the database.
     * @param {SimpsonCreateManyAndReturnArgs} args - Arguments to create many Simpsons.
     * @example
     * // Create many Simpsons
     * const simpson = await prisma.simpson.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Simpsons and only return the `id`
     * const simpsonWithIdOnly = await prisma.simpson.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SimpsonCreateManyAndReturnArgs>(args?: SelectSubset<T, SimpsonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SimpsonPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Simpson.
     * @param {SimpsonDeleteArgs} args - Arguments to delete one Simpson.
     * @example
     * // Delete one Simpson
     * const Simpson = await prisma.simpson.delete({
     *   where: {
     *     // ... filter to delete one Simpson
     *   }
     * })
     * 
     */
    delete<T extends SimpsonDeleteArgs>(args: SelectSubset<T, SimpsonDeleteArgs<ExtArgs>>): Prisma__SimpsonClient<$Result.GetResult<Prisma.$SimpsonPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Simpson.
     * @param {SimpsonUpdateArgs} args - Arguments to update one Simpson.
     * @example
     * // Update one Simpson
     * const simpson = await prisma.simpson.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SimpsonUpdateArgs>(args: SelectSubset<T, SimpsonUpdateArgs<ExtArgs>>): Prisma__SimpsonClient<$Result.GetResult<Prisma.$SimpsonPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Simpsons.
     * @param {SimpsonDeleteManyArgs} args - Arguments to filter Simpsons to delete.
     * @example
     * // Delete a few Simpsons
     * const { count } = await prisma.simpson.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SimpsonDeleteManyArgs>(args?: SelectSubset<T, SimpsonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Simpsons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimpsonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Simpsons
     * const simpson = await prisma.simpson.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SimpsonUpdateManyArgs>(args: SelectSubset<T, SimpsonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Simpson.
     * @param {SimpsonUpsertArgs} args - Arguments to update or create a Simpson.
     * @example
     * // Update or create a Simpson
     * const simpson = await prisma.simpson.upsert({
     *   create: {
     *     // ... data to create a Simpson
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Simpson we want to update
     *   }
     * })
     */
    upsert<T extends SimpsonUpsertArgs>(args: SelectSubset<T, SimpsonUpsertArgs<ExtArgs>>): Prisma__SimpsonClient<$Result.GetResult<Prisma.$SimpsonPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Simpsons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimpsonCountArgs} args - Arguments to filter Simpsons to count.
     * @example
     * // Count the number of Simpsons
     * const count = await prisma.simpson.count({
     *   where: {
     *     // ... the filter for the Simpsons we want to count
     *   }
     * })
    **/
    count<T extends SimpsonCountArgs>(
      args?: Subset<T, SimpsonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SimpsonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Simpson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimpsonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SimpsonAggregateArgs>(args: Subset<T, SimpsonAggregateArgs>): Prisma.PrismaPromise<GetSimpsonAggregateType<T>>

    /**
     * Group by Simpson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SimpsonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SimpsonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SimpsonGroupByArgs['orderBy'] }
        : { orderBy?: SimpsonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SimpsonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSimpsonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Simpson model
   */
  readonly fields: SimpsonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Simpson.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SimpsonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Simpson model
   */ 
  interface SimpsonFieldRefs {
    readonly id: FieldRef<"Simpson", 'String'>
    readonly Problem: FieldRef<"Simpson", 'Problem'>
    readonly solution: FieldRef<"Simpson", 'String'>
    readonly xstart: FieldRef<"Simpson", 'Float'>
    readonly xend: FieldRef<"Simpson", 'Float'>
    readonly n: FieldRef<"Simpson", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Simpson findUnique
   */
  export type SimpsonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simpson
     */
    select?: SimpsonSelect<ExtArgs> | null
    /**
     * Filter, which Simpson to fetch.
     */
    where: SimpsonWhereUniqueInput
  }

  /**
   * Simpson findUniqueOrThrow
   */
  export type SimpsonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simpson
     */
    select?: SimpsonSelect<ExtArgs> | null
    /**
     * Filter, which Simpson to fetch.
     */
    where: SimpsonWhereUniqueInput
  }

  /**
   * Simpson findFirst
   */
  export type SimpsonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simpson
     */
    select?: SimpsonSelect<ExtArgs> | null
    /**
     * Filter, which Simpson to fetch.
     */
    where?: SimpsonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Simpsons to fetch.
     */
    orderBy?: SimpsonOrderByWithRelationInput | SimpsonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Simpsons.
     */
    cursor?: SimpsonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Simpsons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Simpsons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Simpsons.
     */
    distinct?: SimpsonScalarFieldEnum | SimpsonScalarFieldEnum[]
  }

  /**
   * Simpson findFirstOrThrow
   */
  export type SimpsonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simpson
     */
    select?: SimpsonSelect<ExtArgs> | null
    /**
     * Filter, which Simpson to fetch.
     */
    where?: SimpsonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Simpsons to fetch.
     */
    orderBy?: SimpsonOrderByWithRelationInput | SimpsonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Simpsons.
     */
    cursor?: SimpsonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Simpsons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Simpsons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Simpsons.
     */
    distinct?: SimpsonScalarFieldEnum | SimpsonScalarFieldEnum[]
  }

  /**
   * Simpson findMany
   */
  export type SimpsonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simpson
     */
    select?: SimpsonSelect<ExtArgs> | null
    /**
     * Filter, which Simpsons to fetch.
     */
    where?: SimpsonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Simpsons to fetch.
     */
    orderBy?: SimpsonOrderByWithRelationInput | SimpsonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Simpsons.
     */
    cursor?: SimpsonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Simpsons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Simpsons.
     */
    skip?: number
    distinct?: SimpsonScalarFieldEnum | SimpsonScalarFieldEnum[]
  }

  /**
   * Simpson create
   */
  export type SimpsonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simpson
     */
    select?: SimpsonSelect<ExtArgs> | null
    /**
     * The data needed to create a Simpson.
     */
    data: XOR<SimpsonCreateInput, SimpsonUncheckedCreateInput>
  }

  /**
   * Simpson createMany
   */
  export type SimpsonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Simpsons.
     */
    data: SimpsonCreateManyInput | SimpsonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Simpson createManyAndReturn
   */
  export type SimpsonCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simpson
     */
    select?: SimpsonSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Simpsons.
     */
    data: SimpsonCreateManyInput | SimpsonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Simpson update
   */
  export type SimpsonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simpson
     */
    select?: SimpsonSelect<ExtArgs> | null
    /**
     * The data needed to update a Simpson.
     */
    data: XOR<SimpsonUpdateInput, SimpsonUncheckedUpdateInput>
    /**
     * Choose, which Simpson to update.
     */
    where: SimpsonWhereUniqueInput
  }

  /**
   * Simpson updateMany
   */
  export type SimpsonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Simpsons.
     */
    data: XOR<SimpsonUpdateManyMutationInput, SimpsonUncheckedUpdateManyInput>
    /**
     * Filter which Simpsons to update
     */
    where?: SimpsonWhereInput
  }

  /**
   * Simpson upsert
   */
  export type SimpsonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simpson
     */
    select?: SimpsonSelect<ExtArgs> | null
    /**
     * The filter to search for the Simpson to update in case it exists.
     */
    where: SimpsonWhereUniqueInput
    /**
     * In case the Simpson found by the `where` argument doesn't exist, create a new Simpson with this data.
     */
    create: XOR<SimpsonCreateInput, SimpsonUncheckedCreateInput>
    /**
     * In case the Simpson was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SimpsonUpdateInput, SimpsonUncheckedUpdateInput>
  }

  /**
   * Simpson delete
   */
  export type SimpsonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simpson
     */
    select?: SimpsonSelect<ExtArgs> | null
    /**
     * Filter which Simpson to delete.
     */
    where: SimpsonWhereUniqueInput
  }

  /**
   * Simpson deleteMany
   */
  export type SimpsonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Simpsons to delete
     */
    where?: SimpsonWhereInput
  }

  /**
   * Simpson without action
   */
  export type SimpsonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Simpson
     */
    select?: SimpsonSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const InfoScalarFieldEnum: {
    id: 'id',
    Problem: 'Problem',
    solution: 'solution',
    xl: 'xl',
    xr: 'xr',
    size: 'size'
  };

  export type InfoScalarFieldEnum = (typeof InfoScalarFieldEnum)[keyof typeof InfoScalarFieldEnum]


  export const InterScalarFieldEnum: {
    id: 'id',
    Problem: 'Problem',
    x: 'x',
    Fx: 'Fx',
    xvalue: 'xvalue',
    size: 'size'
  };

  export type InterScalarFieldEnum = (typeof InterScalarFieldEnum)[keyof typeof InterScalarFieldEnum]


  export const SimpsonScalarFieldEnum: {
    id: 'id',
    Problem: 'Problem',
    solution: 'solution',
    xstart: 'xstart',
    xend: 'xend',
    n: 'n'
  };

  export type SimpsonScalarFieldEnum = (typeof SimpsonScalarFieldEnum)[keyof typeof SimpsonScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Problem'
   */
  export type EnumProblemFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Problem'>
    


  /**
   * Reference to a field of type 'Problem[]'
   */
  export type ListEnumProblemFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Problem[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type InfoWhereInput = {
    AND?: InfoWhereInput | InfoWhereInput[]
    OR?: InfoWhereInput[]
    NOT?: InfoWhereInput | InfoWhereInput[]
    id?: StringFilter<"Info"> | string
    Problem?: EnumProblemFilter<"Info"> | $Enums.Problem
    solution?: StringFilter<"Info"> | string
    xl?: FloatFilter<"Info"> | number
    xr?: FloatFilter<"Info"> | number
    size?: IntFilter<"Info"> | number
  }

  export type InfoOrderByWithRelationInput = {
    id?: SortOrder
    Problem?: SortOrder
    solution?: SortOrder
    xl?: SortOrder
    xr?: SortOrder
    size?: SortOrder
  }

  export type InfoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    solution?: string
    AND?: InfoWhereInput | InfoWhereInput[]
    OR?: InfoWhereInput[]
    NOT?: InfoWhereInput | InfoWhereInput[]
    Problem?: EnumProblemFilter<"Info"> | $Enums.Problem
    xl?: FloatFilter<"Info"> | number
    xr?: FloatFilter<"Info"> | number
    size?: IntFilter<"Info"> | number
  }, "id" | "solution">

  export type InfoOrderByWithAggregationInput = {
    id?: SortOrder
    Problem?: SortOrder
    solution?: SortOrder
    xl?: SortOrder
    xr?: SortOrder
    size?: SortOrder
    _count?: InfoCountOrderByAggregateInput
    _avg?: InfoAvgOrderByAggregateInput
    _max?: InfoMaxOrderByAggregateInput
    _min?: InfoMinOrderByAggregateInput
    _sum?: InfoSumOrderByAggregateInput
  }

  export type InfoScalarWhereWithAggregatesInput = {
    AND?: InfoScalarWhereWithAggregatesInput | InfoScalarWhereWithAggregatesInput[]
    OR?: InfoScalarWhereWithAggregatesInput[]
    NOT?: InfoScalarWhereWithAggregatesInput | InfoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Info"> | string
    Problem?: EnumProblemWithAggregatesFilter<"Info"> | $Enums.Problem
    solution?: StringWithAggregatesFilter<"Info"> | string
    xl?: FloatWithAggregatesFilter<"Info"> | number
    xr?: FloatWithAggregatesFilter<"Info"> | number
    size?: IntWithAggregatesFilter<"Info"> | number
  }

  export type InterWhereInput = {
    AND?: InterWhereInput | InterWhereInput[]
    OR?: InterWhereInput[]
    NOT?: InterWhereInput | InterWhereInput[]
    id?: StringFilter<"Inter"> | string
    Problem?: EnumProblemFilter<"Inter"> | $Enums.Problem
    x?: FloatNullableListFilter<"Inter">
    Fx?: FloatNullableListFilter<"Inter">
    xvalue?: FloatFilter<"Inter"> | number
    size?: IntFilter<"Inter"> | number
  }

  export type InterOrderByWithRelationInput = {
    id?: SortOrder
    Problem?: SortOrder
    x?: SortOrder
    Fx?: SortOrder
    xvalue?: SortOrder
    size?: SortOrder
  }

  export type InterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InterWhereInput | InterWhereInput[]
    OR?: InterWhereInput[]
    NOT?: InterWhereInput | InterWhereInput[]
    Problem?: EnumProblemFilter<"Inter"> | $Enums.Problem
    x?: FloatNullableListFilter<"Inter">
    Fx?: FloatNullableListFilter<"Inter">
    xvalue?: FloatFilter<"Inter"> | number
    size?: IntFilter<"Inter"> | number
  }, "id">

  export type InterOrderByWithAggregationInput = {
    id?: SortOrder
    Problem?: SortOrder
    x?: SortOrder
    Fx?: SortOrder
    xvalue?: SortOrder
    size?: SortOrder
    _count?: InterCountOrderByAggregateInput
    _avg?: InterAvgOrderByAggregateInput
    _max?: InterMaxOrderByAggregateInput
    _min?: InterMinOrderByAggregateInput
    _sum?: InterSumOrderByAggregateInput
  }

  export type InterScalarWhereWithAggregatesInput = {
    AND?: InterScalarWhereWithAggregatesInput | InterScalarWhereWithAggregatesInput[]
    OR?: InterScalarWhereWithAggregatesInput[]
    NOT?: InterScalarWhereWithAggregatesInput | InterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Inter"> | string
    Problem?: EnumProblemWithAggregatesFilter<"Inter"> | $Enums.Problem
    x?: FloatNullableListFilter<"Inter">
    Fx?: FloatNullableListFilter<"Inter">
    xvalue?: FloatWithAggregatesFilter<"Inter"> | number
    size?: IntWithAggregatesFilter<"Inter"> | number
  }

  export type SimpsonWhereInput = {
    AND?: SimpsonWhereInput | SimpsonWhereInput[]
    OR?: SimpsonWhereInput[]
    NOT?: SimpsonWhereInput | SimpsonWhereInput[]
    id?: StringFilter<"Simpson"> | string
    Problem?: EnumProblemFilter<"Simpson"> | $Enums.Problem
    solution?: StringFilter<"Simpson"> | string
    xstart?: FloatFilter<"Simpson"> | number
    xend?: FloatFilter<"Simpson"> | number
    n?: IntFilter<"Simpson"> | number
  }

  export type SimpsonOrderByWithRelationInput = {
    id?: SortOrder
    Problem?: SortOrder
    solution?: SortOrder
    xstart?: SortOrder
    xend?: SortOrder
    n?: SortOrder
  }

  export type SimpsonWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    solution?: string
    AND?: SimpsonWhereInput | SimpsonWhereInput[]
    OR?: SimpsonWhereInput[]
    NOT?: SimpsonWhereInput | SimpsonWhereInput[]
    Problem?: EnumProblemFilter<"Simpson"> | $Enums.Problem
    xstart?: FloatFilter<"Simpson"> | number
    xend?: FloatFilter<"Simpson"> | number
    n?: IntFilter<"Simpson"> | number
  }, "id" | "solution">

  export type SimpsonOrderByWithAggregationInput = {
    id?: SortOrder
    Problem?: SortOrder
    solution?: SortOrder
    xstart?: SortOrder
    xend?: SortOrder
    n?: SortOrder
    _count?: SimpsonCountOrderByAggregateInput
    _avg?: SimpsonAvgOrderByAggregateInput
    _max?: SimpsonMaxOrderByAggregateInput
    _min?: SimpsonMinOrderByAggregateInput
    _sum?: SimpsonSumOrderByAggregateInput
  }

  export type SimpsonScalarWhereWithAggregatesInput = {
    AND?: SimpsonScalarWhereWithAggregatesInput | SimpsonScalarWhereWithAggregatesInput[]
    OR?: SimpsonScalarWhereWithAggregatesInput[]
    NOT?: SimpsonScalarWhereWithAggregatesInput | SimpsonScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Simpson"> | string
    Problem?: EnumProblemWithAggregatesFilter<"Simpson"> | $Enums.Problem
    solution?: StringWithAggregatesFilter<"Simpson"> | string
    xstart?: FloatWithAggregatesFilter<"Simpson"> | number
    xend?: FloatWithAggregatesFilter<"Simpson"> | number
    n?: IntWithAggregatesFilter<"Simpson"> | number
  }

  export type InfoCreateInput = {
    id?: string
    Problem: $Enums.Problem
    solution: string
    xl?: number
    xr?: number
    size?: number
  }

  export type InfoUncheckedCreateInput = {
    id?: string
    Problem: $Enums.Problem
    solution: string
    xl?: number
    xr?: number
    size?: number
  }

  export type InfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Problem?: EnumProblemFieldUpdateOperationsInput | $Enums.Problem
    solution?: StringFieldUpdateOperationsInput | string
    xl?: FloatFieldUpdateOperationsInput | number
    xr?: FloatFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
  }

  export type InfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Problem?: EnumProblemFieldUpdateOperationsInput | $Enums.Problem
    solution?: StringFieldUpdateOperationsInput | string
    xl?: FloatFieldUpdateOperationsInput | number
    xr?: FloatFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
  }

  export type InfoCreateManyInput = {
    id?: string
    Problem: $Enums.Problem
    solution: string
    xl?: number
    xr?: number
    size?: number
  }

  export type InfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Problem?: EnumProblemFieldUpdateOperationsInput | $Enums.Problem
    solution?: StringFieldUpdateOperationsInput | string
    xl?: FloatFieldUpdateOperationsInput | number
    xr?: FloatFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
  }

  export type InfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Problem?: EnumProblemFieldUpdateOperationsInput | $Enums.Problem
    solution?: StringFieldUpdateOperationsInput | string
    xl?: FloatFieldUpdateOperationsInput | number
    xr?: FloatFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
  }

  export type InterCreateInput = {
    id?: string
    Problem: $Enums.Problem
    x?: InterCreatexInput | number[]
    Fx?: InterCreateFxInput | number[]
    xvalue?: number
    size?: number
  }

  export type InterUncheckedCreateInput = {
    id?: string
    Problem: $Enums.Problem
    x?: InterCreatexInput | number[]
    Fx?: InterCreateFxInput | number[]
    xvalue?: number
    size?: number
  }

  export type InterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Problem?: EnumProblemFieldUpdateOperationsInput | $Enums.Problem
    x?: InterUpdatexInput | number[]
    Fx?: InterUpdateFxInput | number[]
    xvalue?: FloatFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
  }

  export type InterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Problem?: EnumProblemFieldUpdateOperationsInput | $Enums.Problem
    x?: InterUpdatexInput | number[]
    Fx?: InterUpdateFxInput | number[]
    xvalue?: FloatFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
  }

  export type InterCreateManyInput = {
    id?: string
    Problem: $Enums.Problem
    x?: InterCreatexInput | number[]
    Fx?: InterCreateFxInput | number[]
    xvalue?: number
    size?: number
  }

  export type InterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Problem?: EnumProblemFieldUpdateOperationsInput | $Enums.Problem
    x?: InterUpdatexInput | number[]
    Fx?: InterUpdateFxInput | number[]
    xvalue?: FloatFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
  }

  export type InterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Problem?: EnumProblemFieldUpdateOperationsInput | $Enums.Problem
    x?: InterUpdatexInput | number[]
    Fx?: InterUpdateFxInput | number[]
    xvalue?: FloatFieldUpdateOperationsInput | number
    size?: IntFieldUpdateOperationsInput | number
  }

  export type SimpsonCreateInput = {
    id?: string
    Problem: $Enums.Problem
    solution: string
    xstart: number
    xend: number
    n?: number
  }

  export type SimpsonUncheckedCreateInput = {
    id?: string
    Problem: $Enums.Problem
    solution: string
    xstart: number
    xend: number
    n?: number
  }

  export type SimpsonUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Problem?: EnumProblemFieldUpdateOperationsInput | $Enums.Problem
    solution?: StringFieldUpdateOperationsInput | string
    xstart?: FloatFieldUpdateOperationsInput | number
    xend?: FloatFieldUpdateOperationsInput | number
    n?: IntFieldUpdateOperationsInput | number
  }

  export type SimpsonUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Problem?: EnumProblemFieldUpdateOperationsInput | $Enums.Problem
    solution?: StringFieldUpdateOperationsInput | string
    xstart?: FloatFieldUpdateOperationsInput | number
    xend?: FloatFieldUpdateOperationsInput | number
    n?: IntFieldUpdateOperationsInput | number
  }

  export type SimpsonCreateManyInput = {
    id?: string
    Problem: $Enums.Problem
    solution: string
    xstart: number
    xend: number
    n?: number
  }

  export type SimpsonUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    Problem?: EnumProblemFieldUpdateOperationsInput | $Enums.Problem
    solution?: StringFieldUpdateOperationsInput | string
    xstart?: FloatFieldUpdateOperationsInput | number
    xend?: FloatFieldUpdateOperationsInput | number
    n?: IntFieldUpdateOperationsInput | number
  }

  export type SimpsonUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    Problem?: EnumProblemFieldUpdateOperationsInput | $Enums.Problem
    solution?: StringFieldUpdateOperationsInput | string
    xstart?: FloatFieldUpdateOperationsInput | number
    xend?: FloatFieldUpdateOperationsInput | number
    n?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumProblemFilter<$PrismaModel = never> = {
    equals?: $Enums.Problem | EnumProblemFieldRefInput<$PrismaModel>
    in?: $Enums.Problem[] | ListEnumProblemFieldRefInput<$PrismaModel>
    notIn?: $Enums.Problem[] | ListEnumProblemFieldRefInput<$PrismaModel>
    not?: NestedEnumProblemFilter<$PrismaModel> | $Enums.Problem
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type InfoCountOrderByAggregateInput = {
    id?: SortOrder
    Problem?: SortOrder
    solution?: SortOrder
    xl?: SortOrder
    xr?: SortOrder
    size?: SortOrder
  }

  export type InfoAvgOrderByAggregateInput = {
    xl?: SortOrder
    xr?: SortOrder
    size?: SortOrder
  }

  export type InfoMaxOrderByAggregateInput = {
    id?: SortOrder
    Problem?: SortOrder
    solution?: SortOrder
    xl?: SortOrder
    xr?: SortOrder
    size?: SortOrder
  }

  export type InfoMinOrderByAggregateInput = {
    id?: SortOrder
    Problem?: SortOrder
    solution?: SortOrder
    xl?: SortOrder
    xr?: SortOrder
    size?: SortOrder
  }

  export type InfoSumOrderByAggregateInput = {
    xl?: SortOrder
    xr?: SortOrder
    size?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumProblemWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Problem | EnumProblemFieldRefInput<$PrismaModel>
    in?: $Enums.Problem[] | ListEnumProblemFieldRefInput<$PrismaModel>
    notIn?: $Enums.Problem[] | ListEnumProblemFieldRefInput<$PrismaModel>
    not?: NestedEnumProblemWithAggregatesFilter<$PrismaModel> | $Enums.Problem
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProblemFilter<$PrismaModel>
    _max?: NestedEnumProblemFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    has?: number | FloatFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListFloatFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListFloatFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type InterCountOrderByAggregateInput = {
    id?: SortOrder
    Problem?: SortOrder
    x?: SortOrder
    Fx?: SortOrder
    xvalue?: SortOrder
    size?: SortOrder
  }

  export type InterAvgOrderByAggregateInput = {
    x?: SortOrder
    Fx?: SortOrder
    xvalue?: SortOrder
    size?: SortOrder
  }

  export type InterMaxOrderByAggregateInput = {
    id?: SortOrder
    Problem?: SortOrder
    xvalue?: SortOrder
    size?: SortOrder
  }

  export type InterMinOrderByAggregateInput = {
    id?: SortOrder
    Problem?: SortOrder
    xvalue?: SortOrder
    size?: SortOrder
  }

  export type InterSumOrderByAggregateInput = {
    x?: SortOrder
    Fx?: SortOrder
    xvalue?: SortOrder
    size?: SortOrder
  }

  export type SimpsonCountOrderByAggregateInput = {
    id?: SortOrder
    Problem?: SortOrder
    solution?: SortOrder
    xstart?: SortOrder
    xend?: SortOrder
    n?: SortOrder
  }

  export type SimpsonAvgOrderByAggregateInput = {
    xstart?: SortOrder
    xend?: SortOrder
    n?: SortOrder
  }

  export type SimpsonMaxOrderByAggregateInput = {
    id?: SortOrder
    Problem?: SortOrder
    solution?: SortOrder
    xstart?: SortOrder
    xend?: SortOrder
    n?: SortOrder
  }

  export type SimpsonMinOrderByAggregateInput = {
    id?: SortOrder
    Problem?: SortOrder
    solution?: SortOrder
    xstart?: SortOrder
    xend?: SortOrder
    n?: SortOrder
  }

  export type SimpsonSumOrderByAggregateInput = {
    xstart?: SortOrder
    xend?: SortOrder
    n?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumProblemFieldUpdateOperationsInput = {
    set?: $Enums.Problem
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type InterCreatexInput = {
    set: number[]
  }

  export type InterCreateFxInput = {
    set: number[]
  }

  export type InterUpdatexInput = {
    set?: number[]
    push?: number | number[]
  }

  export type InterUpdateFxInput = {
    set?: number[]
    push?: number | number[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumProblemFilter<$PrismaModel = never> = {
    equals?: $Enums.Problem | EnumProblemFieldRefInput<$PrismaModel>
    in?: $Enums.Problem[] | ListEnumProblemFieldRefInput<$PrismaModel>
    notIn?: $Enums.Problem[] | ListEnumProblemFieldRefInput<$PrismaModel>
    not?: NestedEnumProblemFilter<$PrismaModel> | $Enums.Problem
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumProblemWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Problem | EnumProblemFieldRefInput<$PrismaModel>
    in?: $Enums.Problem[] | ListEnumProblemFieldRefInput<$PrismaModel>
    notIn?: $Enums.Problem[] | ListEnumProblemFieldRefInput<$PrismaModel>
    not?: NestedEnumProblemWithAggregatesFilter<$PrismaModel> | $Enums.Problem
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProblemFilter<$PrismaModel>
    _max?: NestedEnumProblemFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use InfoDefaultArgs instead
     */
    export type InfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InfoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InterDefaultArgs instead
     */
    export type InterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SimpsonDefaultArgs instead
     */
    export type SimpsonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SimpsonDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}